Leetcode :
Given an array nums, return true if the array was originally sorted in non-decreasing order,
 then rotated some number of positions (including zero). Otherwise, return false.


Basic Solution:
TIme complexity-- O(n)
Space complexity--O(1)
public boolean check(int[] nums) {
        int n=nums.length;
        if(n==1)return true;
        boolean flag=false;
        int j=0,i=0;
        for( i=0;i<n-1;i++){
            if(nums[i]<=nums[i+1]){
                flag=true;
            }else{
                flag=false;
                j=i+1;
                break;
            }
        }
        if(j==0 && flag==true){
            return true;
        }
        for(j=i+1; j<n; j++){
            if(j!=n-1){
               if(nums[j]<=nums[j+1]){
                flag=true;
             } else{
                 return false;
             }
            }else{
                return nums[0]>=nums[j]?true:false;
            }
        }
        return false;
    }


**************** Optimized Solution********************
TIme complexity-- O(n)
Space complexity--O(1)

bool check(vector<int>& nums) {
        int n=nums.size();
        int cnt=0;
        for(int i=1;i<n;i++){
            if(nums[i-1]>nums[i]){
                cnt++;
            }
        }
        if(nums[n-1]>nums[0]){
            cnt++;
        }
        return cnt<=1;
    }

########################## MOST OPTIMIZED######################:
TIme complexity-- O(n)
Space complexity--O(1)
code:
    int count=0;
        for(int i=0;i<nums.size();i++){
            if(nums[i]>nums[(i+1)%nums.size()])
                count++;
        }
        return (count<=1);
    }